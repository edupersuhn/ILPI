/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package View;

import Control.Impl.Exception.DAOException;
import Control.Impl.ImplCardapioDAO;
import Control.Impl.ImplIdosoDAO;
import Control.Impl.ImplIncidenteDAO;
import Control.Impl.ImplItemCardapioDAO;
import Control.Impl.ImplItemPrescricaoMedica;
import Control.Impl.ImplPrescricaoMedica;
import Control.Impl.ImplQuartoDAO;
import Model.Cardapio;
import Model.Idoso;
import Model.Incidente;
import Model.ItemCardapio;
import Model.ItemPrescricaoMedica;
import Model.PrescricaoMedica;
import Model.Quarto;
import Util.DataConverter;
import java.io.File;
import java.io.FileWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Eduardo
 */
public class FrameRelatorios extends javax.swing.JFrame {

    /**
     * Creates new form FrameRelatorios
     */
    public FrameRelatorios() {
        initComponents();
        try {
            List<Idoso> lista = ImplIdosoDAO.getInstance().encontrarTodosIdosos();
            for (Iterator<Idoso> it = lista.iterator(); it.hasNext();) {
                Idoso idoso = it.next();
                comboBoxIdoso.addItem(idoso);
            }
        } catch(DAOException daoEx) {
            
        } catch(Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botaoRelCardapio = new javax.swing.JButton();
        botaoRelPrescricao = new javax.swing.JButton();
        comboBoxIdoso = new javax.swing.JComboBox();
        botaoRelQuarto = new javax.swing.JButton();
        botaoRelIncidentes = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Relatórios");
        setResizable(false);

        botaoRelCardapio.setText("Relatório de Cardápio");
        botaoRelCardapio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRelCardapioActionPerformed(evt);
            }
        });

        botaoRelPrescricao.setText("Relatório de Prescrição Médica");
        botaoRelPrescricao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRelPrescricaoActionPerformed(evt);
            }
        });

        comboBoxIdoso.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos os idosos" }));

        botaoRelQuarto.setText("Relatório de Alocação de Quarto");
        botaoRelQuarto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRelQuartoActionPerformed(evt);
            }
        });

        botaoRelIncidentes.setText("Relatório de Incidentes");
        botaoRelIncidentes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRelIncidentesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(botaoRelPrescricao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botaoRelCardapio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botaoRelQuarto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botaoRelIncidentes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(comboBoxIdoso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botaoRelCardapio)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoRelPrescricao)
                    .addComponent(comboBoxIdoso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(botaoRelQuarto)
                .addGap(18, 18, 18)
                .addComponent(botaoRelIncidentes)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoRelCardapioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRelCardapioActionPerformed
        System.out.println("Relatório de cardápio");
        StringBuffer strBuffer = new StringBuffer();
        strBuffer.append("--------------- RELATORIO DE CARDÁPIO ---------------\n");
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/YYYY");
        strBuffer.append("DATA: " + format.format(new Date()) + "\n");
        strBuffer.append("-----------------------------------------------------");
        List<Cardapio> lista;
        try {
            lista = ImplCardapioDAO.getInstance().encontrarTodos();
            for (Iterator<Cardapio> it = lista.iterator(); it.hasNext();) {
                Cardapio cardapio = it.next();
                strBuffer.append("CARDÁPIO: " + cardapio.getNome() + "\n");
                List<ItemCardapio> listaItens = ImplItemCardapioDAO.getInstance().encontrarTodos(cardapio.getCodigo());
                for (Iterator<ItemCardapio> it1 = listaItens.iterator(); it1.hasNext();) {
                    ItemCardapio itemCardapio = it1.next();
                    strBuffer.append("\tAlimento: " + itemCardapio.getAlimento().getNomeAlimento() + "\n");
                }
                strBuffer.append("-----------------------------------------------------\n");
            }
            File file = new File("Relatório de Cardápio.txt");
            int conta = 1;
            while(file.exists()) {
                file = new File("Relatório de Cardápio" + conta + ".txt");
                conta++;
            }
            FileWriter writer = new FileWriter(file);
            writer.write(strBuffer.toString());
            writer.close();
            JOptionPane.showMessageDialog(this, "Relatório gerado em: " + file.getAbsolutePath());
        } catch(DAOException daoEx) {
                JOptionPane.showMessageDialog(this, "Não há cardápio cadastrado");
        } catch(Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_botaoRelCardapioActionPerformed

    private void botaoRelPrescricaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRelPrescricaoActionPerformed
        StringBuffer strBuffer = new StringBuffer();
        strBuffer.append("-------- RELATORIO DE PRESCRIÇÃO MÉDICA DE TODOS OS IDOSOS --------\n");
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/YYYY");
        strBuffer.append("DATA: " + format.format(new Date()));
        strBuffer.append("-------------------------------------------------------------------\n");
        List<PrescricaoMedica> lista;
        List<Idoso> listaIdosos;
        try {
            if(comboBoxIdoso.getSelectedIndex() == 0) {
                listaIdosos = ImplIdosoDAO.getInstance().encontrarTodosIdosos();
            }
            else {
                listaIdosos = new ArrayList<>();
                listaIdosos.add((Idoso) comboBoxIdoso.getSelectedItem());
            }
            for (Iterator<Idoso> it = listaIdosos.iterator(); it.hasNext();) {
                Idoso idoso = it.next();
                lista = ImplPrescricaoMedica.getInstance().encontrarTodos();
                // lista = ImplPrescricaoMedica.getInstance().encontrarTodosIdoso(idoso.getCodIdoso());
                strBuffer.append("IDOSO: " + idoso.getNomeIdoso() + "\n");
                for (Iterator<PrescricaoMedica> it1 = lista.iterator(); it1.hasNext();) {
                    PrescricaoMedica prescricao = it1.next();
                    strBuffer.append("PRESCRIÇÃO: " + prescricao.getCodigoPrescricao() + "\n"/*getIDPrescricao*/);
                    List<ItemPrescricaoMedica> listaItens;
                    try {
                        listaItens = ImplItemPrescricaoMedica.getInstance().encontrarTodos(prescricao.getCodigoPrescricao());
                    } catch(DAOException daoEx) {
                        JOptionPane.showMessageDialog(this, "Não há prescrição médica cadastrada para este idoso");
                        return;
                    }
                    for (Iterator<ItemPrescricaoMedica> it2 = listaItens.iterator(); it2.hasNext();) {
                        ItemPrescricaoMedica itemPrescricao = it2.next();
                        strBuffer.append("\tRemedio: " + itemPrescricao.getRemedio().getNomeRemedio() + "\n");
                    }
                    strBuffer.append("-------------------------------------------------------------------\n");
                }
            }
            File file;
            if(listaIdosos.size() == 1) {
                file = new File("Relatório de Prescrição Médica do Idoso " + listaIdosos.get(0).getNomeIdoso() + ".txt");
                int conta = 1;
                while(file.exists()) {
                    file = new File("Relatório de Prescrição Médica do Idoso " + listaIdosos.get(0).getNomeIdoso() + conta + ".txt");
                    conta++;
                }
            }
            else {
                file = new File("Relatório de Prescrição Médica.txt");
                int conta = 1;
                while(file.exists()) {
                    file = new File("Relatório de Prescrição Médica" + conta + ".txt");
                    conta++;
                }
            }
            FileWriter writer = new FileWriter(file);
            writer.write(strBuffer.toString());
            writer.close();
            JOptionPane.showMessageDialog(this, "Relatório gerado em: " + file.getAbsolutePath());
        } catch(DAOException daoEx) {
            JOptionPane.showMessageDialog(this, "Não há prescrição médica cadastrada");
        } catch(Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_botaoRelPrescricaoActionPerformed

    private void botaoRelQuartoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRelQuartoActionPerformed
        List<Quarto> listaQuartos;
        List<Idoso> listaIdosos;
        StringBuffer strBuffer = new StringBuffer();
        strBuffer.append("----- RELATORIO DE ALOCAÇÃO DE QUARTO -----\n");
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/YYYY");
        strBuffer.append("DATA: " + format.format(new Date()) + "\n");
        strBuffer.append("--------------------------------------------\n");
        try {
            listaQuartos = ImplQuartoDAO.getInstance().encontrarTodos();
            for (Iterator<Quarto> it = listaQuartos.iterator(); it.hasNext();) {
                Quarto quarto = it.next();
                strBuffer.append("N° DO QUARTO: " + quarto.getNumQuarto() + "\n");
                strBuffer.append("N° DO ANDAR: " + quarto.getNumAndar() + "\n");
                strBuffer.append("ESPAÇO DISPONÍVEL: " + quarto.getCapacidade() + "\n");
                strBuffer.append("ESTADO DO QUARTO: " + quarto.getEstado() + "\n");
                listaIdosos = quarto.getListaIdoso();
                for (Iterator<Idoso> it1 = listaIdosos.iterator(); it1.hasNext();) {
                    Idoso idoso = it1.next();
                    strBuffer.append("\tIdoso: " + idoso.getNomeIdoso() + "\n");
                }
                strBuffer.append("--------------------------------------------\n");
            }
            File file = new File("Relatório de Alocação de Quartos.txt");
            int conta = 1;
            while(file.exists()) {
                file = new File("Relatório de Alocação de Quartos" + conta + ".txt");
                conta++;
            }
            FileWriter writer = new FileWriter(file);
            writer.write(strBuffer.toString());
            writer.close();
            JOptionPane.showMessageDialog(this, "Relatório gerado em: " + file.getAbsolutePath());
        } catch(DAOException daoEx) {
            JOptionPane.showMessageDialog(this, "Não há quarto cadastrado");
        } 
        catch(Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_botaoRelQuartoActionPerformed

    private void botaoRelIncidentesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRelIncidentesActionPerformed
        List<Incidente> lista;
        StringBuffer strBuffer = new StringBuffer();
        strBuffer.append("--------------- RELATORIO DE INCIDENTES ---------------\n");
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/YYYY");
        strBuffer.append("DATA: " + format.format(new Date()) + "\n");
        strBuffer.append("-------------------------------------------------------\n");
        try {
            lista = ImplIncidenteDAO.getInstance().encontrarTodos();
            for (Iterator<Incidente> it = lista.iterator(); it.hasNext();) {
                Incidente incidente = it.next();
                strBuffer.append("INCIDENTE: " + incidente.getNomIncidente() + "\n");
                strBuffer.append("DATA DO OCORRIDO: " + DataConverter.sqlDateTypeToString(incidente.getDataIncidente()) + "\n");
                strBuffer.append("IDOSO ENVOLVIDO: " + incidente.getIdoso().getNomeIdoso() + "\n");
                strBuffer.append("DESCRIÇÃO DO INCIDENTE:" + incidente.getDescricaoIncidente() + "\n");
                strBuffer.append("-------------------------------------------------------\n");
            }
            File file = new File("Relatório de Incidentes.txt");
            int conta = 1;
            while(file.exists()) {
                file = new File("Relatório de Incidentes" + conta + ".txt");
                conta++;
            }
            FileWriter writer = new FileWriter(file);
            writer.write(strBuffer.toString());
            writer.close();
            JOptionPane.showMessageDialog(this, "Relatório gerado em: " + file.getAbsolutePath());
        } catch(DAOException daoEx) {
            JOptionPane.showMessageDialog(this, "Não há incidente cadastrado");
        } catch(Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_botaoRelIncidentesActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoRelCardapio;
    private javax.swing.JButton botaoRelIncidentes;
    private javax.swing.JButton botaoRelPrescricao;
    private javax.swing.JButton botaoRelQuarto;
    private javax.swing.JComboBox comboBoxIdoso;
    // End of variables declaration//GEN-END:variables
}
